devtools::use_package('dplyr', 'readxl', 'stringr', 'writexl')
devtools::use_package('dplyr', 'readxl', 'stringr')
devtools::use_package(c('dplyr', 'readxl', 'stringr', 'writexl'))
devtools::use_package('dplyr')
devtools::use_package('readxl')
devtools::use_package('stringr')
devtools::use_package('writexl')
devtools::document()
library(roxygen2)
install.packages('xml2')
library(roxygen2)
devtools::document()
library(plfayer)
install.packages('Rtools')
library(plfayer)
?quality_check
library(plfayer)
?quality_check
devtools::document()
?quality_check
# Maybe instead, we just have a display function that converts to wide
load_batch <- function(file_path){
#       - MajorHeightnA
#       - TotalPeakArea1
#       - DisplayDelta1
#       - Name
#
# To do: include data checks:
#   - file format is correct
#   - if more than one tab, make sure tab name is present
#   - Make check peak names against the reference peak list
#     - ensures that no mistakes in typing peaks (ie. extra spaces, etc)
read_xlsx(file_path, sheet = 'named_peaks', na = 'NA') %>%
select(-BiomarkerRTBased, -Notes) %>%
filter(!is.na(BiomarkerFinal) %>% # Remove unnamed peaks
# add if statement so that if there is no batch column, but batch name is in
#filename, it can create a batch column
mutate(DisplayDelta1 = as.numeric(DisplayDelta1)) %>% #,
#Batch = str_extract(string = file_path, pattern = '[Bb]atch ?[0-9]+'),
#BatchDataFileName = paste(Batch, DataFileName, sep = '_')) %>% # ? looks for 0 or 1)
select(Batch, DataFileName, BatchDataFileName, everything()) # Ensure order
}
library(dplyr)
# Maybe instead, we just have a display function that converts to wide
load_batch <- function(file_path){
#       - MajorHeightnA
#       - TotalPeakArea1
#       - DisplayDelta1
#       - Name
#
# To do: include data checks:
#   - file format is correct
#   - if more than one tab, make sure tab name is present
#   - Make check peak names against the reference peak list
#     - ensures that no mistakes in typing peaks (ie. extra spaces, etc)
read_xlsx(file_path, sheet = 'named_peaks', na = 'NA') %>%
select(-BiomarkerRTBased, -Notes) %>%
filter(!is.na(BiomarkerFinal) %>% # Remove unnamed peaks
# add if statement so that if there is no batch column, but batch name is in
#filename, it can create a batch column
mutate(DisplayDelta1 = as.numeric(DisplayDelta1)) %>% #,
#Batch = str_extract(string = file_path, pattern = '[Bb]atch ?[0-9]+'),
#BatchDataFileName = paste(Batch, DataFileName, sep = '_')) %>% # ? looks for 0 or 1)
select(Batch, DataFileName, BatchDataFileName, everything()) # Ensure order
}
library(readxl)
# Maybe instead, we just have a display function that converts to wide
load_batch <- function(file_path){
# This function imports named peak list for downstream processing/analysis
#
# Args:
#   file_path: This is the full path+filename of source data
#     - Input file should be in Excel format (xlsx or xls ok)
#     - If more than one worksheet, relevant data must be
#       included in tabs with following names:
#       - 'named_peaks'
#     - File should have the following columns with headers:
#       - Batch
#       - DataFileName
#       - RetTimeSecs
#       - MajorHeightnA
#       - TotalPeakArea1
#       - DisplayDelta1
#       - Name
#
# To do: include data checks:
#   - file format is correct
#   - if more than one tab, make sure tab name is present
#   - Make check peak names against the reference peak list
#     - ensures that no mistakes in typing peaks (ie. extra spaces, etc)
read_xlsx(file_path, sheet = 'named_peaks', na = 'NA') %>%
select(-BiomarkerRTBased, -Notes) %>%
filter(!is.na(BiomarkerFinal)) %>% # Remove unnamed peaks
# add if statement so that if there is no batch column, but batch name is in
#filename, it can create a batch column
mutate(DisplayDelta1 = as.numeric(DisplayDelta1)) %>% #,
#Batch = str_extract(string = file_path, pattern = '[Bb]atch ?[0-9]+'),
#BatchDataFileName = paste(Batch, DataFileName, sep = '_')) %>% # ? looks for 0 or 1)
select(Batch, DataFileName, BatchDataFileName, everything()) # Ensure order
}
devtools::document()
devtools::document()
library(plfayer)
rm(load_batch)
library(plfayer)
load_batch('C:/Windows/Users/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
load_batch('C:/Users/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
load_batch('C:/Users/Mark/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
load_batch('C:/Users/Mark/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
library(plfayer)
load_batch('C:/Users/Mark/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
a<-load_batch('C:/Users/Mark/Desktop/temp plfa practice - can delete whenever/20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
plfayer::quality_check(a)
library(dplyr)
plfayer::quality_check(a)
quality_check(a)
library(tidyr)
quality_check(a)
?invisible
library(plfayer)
quality_check(a)
library(plfayer)
quality_check(a)
b<-quality_check(a)
print(b)
devtools::document()
devtools::document()
?apply_kvals
?apply_kval
library(plfayer)
normalize_area(a)
library(plfayer)
normalize_area(a)
devtools::use_package('tidyr')
devtools::use_package('stringr')
a %>% normalize_area() %>% subtract_blanks()
lipid_reference <- read_xlsx(
'C:/Users/Mark/Dropbox/umn_gutknecht_postdoc/spruce_project/plfa_13c/20190521_spruce_plfa_biomarker-molecular-wt.xlsx'
)
devtools::use_data(lipid_reference)
library(plfayer)
?lipid_reference
plfayer::lipid_reference
library(plfayer)
?lipid_reference
a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw'))
View(lipid_reference)
library(plfayer)
a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw'))
################
# Load sample wght data sheet
samp_wt_df <- read_xlsx(path = '20190705_spruce_plfa_sample-prep-wksht.xlsx',
sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
fill(`GC Batch #`) %>%
filter(!is.na(`Renamed on day 4`)) %>%
mutate(SampleID = paste(`Sample ID`, '2016',
str_extract(string = `GC Batch #`,
pattern = '[0-9]+$'), sep = '_'),
DataFileName = paste0(`Renamed on day 4`, '.raw'),
Batch = str_extract(string = `GC Batch #`, pattern = '[0-9]$+')) %>%
select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
path1 = file.choose()
################
# Load sample wght data sheet
samp_wt_df <- read_xlsx(path = path1,
sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
fill(`GC Batch #`) %>%
filter(!is.na(`Renamed on day 4`)) %>%
mutate(SampleID = paste(`Sample ID`, '2016',
str_extract(string = `GC Batch #`,
pattern = '[0-9]+$'), sep = '_'),
DataFileName = paste0(`Renamed on day 4`, '.raw'),
Batch = str_extract(string = `GC Batch #`, pattern = '[0-9]$+')) %>%
select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
library(stringr)
################
# Load sample wght data sheet
samp_wt_df <- read_xlsx(path = path1,
sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
fill(`GC Batch #`) %>%
filter(!is.na(`Renamed on day 4`)) %>%
mutate(SampleID = paste(`Sample ID`, '2016',
str_extract(string = `GC Batch #`,
pattern = '[0-9]+$'), sep = '_'),
DataFileName = paste0(`Renamed on day 4`, '.raw'),
Batch = str_extract(string = `GC Batch #`, pattern = '[0-9]$+')) %>%
select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw'))
a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw')) %>% calc_biomarkers()
library(plfayer)
a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw')) %>% calc_biomarkers()
c %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw')) %>% calc_biomarkers()
c<- a %>% normalize_area() %>% subtract_blanks() %>% apply_kval(standard_fnames = c('142.raw', '143.raw')) %>% calc_biomarkers()
View(c)
