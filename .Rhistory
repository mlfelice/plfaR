# - d13C correction factor
# - Methanol 13C
# - Not used in this package yet, but we will also want other metadata for identifying the samples
#
#
# Wnat to make it more transparent which parameters were used in the analysis
# - Might want to print intermediate calculated parameters, like kval, avg of standards, etc
# - Could also store this to a dataframe
# - Metadata dataframe could also be useful (include the role of each sample in this?)
a<-readClipboard()
readClipboard
View(batch6_nmol)
batch_area_df %>%
cast(batch_narm_df, DataFileName ~ BiomarkerFinal,  # make wide
value.var = 'TotalPeakArea1', fun.aggregate = sum) %>%  # vals don't change
# Cols in the df used to develop this script:
# ID_With batch
# Name
# RT (Sec)
# Height (nA)
# Corrected 13C
# Peak Name
# Sum Peak Area
unique(batch6[, c('DatafileName', 'Name')])
# Cols in the df used to develop this script:
# ID_With batch
# Name
# RT (Sec)
# Height (nA)
# Corrected 13C
# Peak Name
# Sum Peak Area
unique(batch6[, c('DatafileName', 'Name')])
# Cols in the df used to develop this script:
# ID_With batch
# Name
# RT (Sec)
# Height (nA)
# Corrected 13C
# Peak Name
# Sum Peak Area
unique(batch6[, c('DataFileName', 'Name')])
source_path <- file.choose()
batch_area_df <- read_excel(source_path, sheet = 'named_peaks', na = 'NA') %>%
select(DataFileName, TotalPeakArea1, Name)
batch_area_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') %>%
select(DataFileName, TotalPeakArea1, Name)
batch_area_df <- batch_area_df[!is.na(batch_raw_df[['Name']]),]
batch_area_df <- batch_area_df[!is.na(batch_area_df[['Name']]),]
Check_duplicate_lipids(batch_area_df)
Check_duplicate_lipids <- function(x){
if(nrow(unique(df[, c('DataFileName', 'Name')])) != nrow(df)){
stop('Warning: Duplicate lipids detected in at least on sample\n',
'Correct peak identification before proceeding')
}
}
Check_duplicate_lipids(batch_area_df)
Check_duplicate_lipids <- function(df){
if(nrow(unique(df[, c('DataFileName', 'Name')])) != nrow(df)){
stop('Warning: Duplicate lipids detected in at least on sample\n',
'Correct peak identification before proceeding')
}
}
Check_duplicate_lipids(batch_area_df)
batch_area_df <-
cast(batch_area_df, DataFileName ~ Name,  # make wide
value.var = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
batch_area_df <-
reshape2::cast(batch_area_df, DataFileName ~ Name,  # make wide
value.var = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
batch_area_df <-
reshape::cast(batch_area_df, DataFileName ~ Name,  # make wide
value.var = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
View(batch_area_df)
batch_area_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') %>%
select(DataFileName, TotalPeakArea1, Name)
batch_area_df <- batch_area_df[!is.na(batch_area_df[['Name']]),]
batch_area_df <-
reshape::cast(batch_area_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
View(batch_area_df)
##############
# Make function for importing wide TotalPeakArea1 data
batch_area_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') #%>%
View(batch_area_df)
##############
# Make function for importing wide TotalPeakArea1 data
batch_area_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') #%>%
##############
# Make function for importing wide TotalPeakArea1 data
batch_area_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') %>%
select(DataFileName, MajorHeightnA, TotalPeakArea1, DisplayDelta1, Name)
batch_area_df <- batch_area_df[!is.na(batch_area_df[['Name']]),]
Check_duplicate_lipids(batch_area_df)
batch_area_df <-
reshape::cast(batch_area_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
View(batch_area_df)
batch_height_df <-
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
##############
# Make function for importing wide TotalPeakArea1 data
batch_df <- readxl::read_excel(source_path, sheet = 'named_peaks', na = 'NA') %>%
select(DataFileName, MajorHeightnA, TotalPeakArea1, DisplayDelta1, Name)
batch_df <- batch_df[!is.na(batch_df[['Name']]),]
Check_duplicate_lipids(batch_df)
batch_area_df <-
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
batch_height_df <-
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
batch_delta_df <-
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'DisplayDelta1', fun.aggregate = sum) #%>%  # vals don't change
View(batch_delta_df)
list(
import_area <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
}
import_height <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
}
import_delta <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'DisplayDelta1', fun.aggregate = sum) #%>%  # vals don't change
}
)
list(
import_area <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
},
import_height <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
},
import_delta <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'DisplayDelta1', fun.aggregate = sum) #%>%  # vals don't change
}
)
import_fins <- list(
import_area <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
},
import_height <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
},
import_delta <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'DisplayDelta1', fun.aggregate = sum) #%>%  # vals don't change
}
)
import_funs[[1]](source_path)
import_funs <- list(
import_area <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'TotalPeakArea1', fun.aggregate = sum) #%>%  # vals don't change
},
import_height <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'MajorHeightnA', fun.aggregate = sum) #%>%  # vals don't change
},
import_delta <- function(filepath){
reshape::cast(batch_df, DataFileName ~ Name,  # make wide
value = 'DisplayDelta1', fun.aggregate = sum) #%>%  # vals don't change
}
)
import_funs[[1]](source_path)
rm(batch_area_df, batch_delta_df, batch_height_df)
rm(import_fins)
lapply(import_funs, function(f){f(df)})
batch6_list <- lapply(import_funs, function(f){f(df)})
names(batch6_list) <- c('peak_area', 'peak_height', 'd13c')
batch6_list[[1]]
batch6_list[1]
batch6_list <- lapply(import_funs, function(f){f(df)})
batch6_list[1]
View(batch6_nmol)
# Maybe the object comes in after analysis - could have the whole project together and use it to
# filter low peak height samples, etc - completely in physeq mold
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g')
View(a)
# Maybe the object comes in after analysis - could have the whole project together and use it to
# filter low peak height samples, etc - completely in physeq mold
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
View(a)
is.na(batch_area_df) <- 0.0
is.na(a) <- 0.0
is.na(a)# <- 0.0
class(is.na(a))# <- 0.0
a[(is.na(a))]# <- 0.0
a[(is.na(a))] <- 0.0
View(a)
# Maybe the object comes in after analysis - could have the whole project together and use it to
# filter low peak height samples, etc - completely in physeq mold
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
View(a)
View(batch6_nmol)
View(batch6_nmol)
View(samp_wt_df)
View(samp_wt_df)
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016',
#                          stringr::str_extract(string = `GC Batch #`,
#                                               pattern = '[0-9]+$'),
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`,
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet 1', na = 'NA') %>%
dplyr::rename(Batch = `GCBatch #`)
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016',
#                          stringr::str_extract(string = `GC Batch #`,
#                                               pattern = '[0-9]+$'),
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`,
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet 1', na = 'NA') %>%
dplyr::rename(Batch = `GCBatch #`)
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016',
#                          stringr::str_extract(string = `GC Batch #`,
#                                               pattern = '[0-9]+$'),
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`,
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet1', na = 'NA') %>%
dplyr::rename(Batch = `GCBatch #`)
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016',
#                          stringr::str_extract(string = `GC Batch #`,
#                                               pattern = '[0-9]+$'),
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`,
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet1', na = 'NA') %>%
dplyr::rename(Batch = `GC Batch #`)
standard_filenames <- (samp_wt_df %>% filter(stringr::str_detect(SampleID,
'^B[0-9]_')))[['DataFileName']]
batch6_nmol <- process_peak_area_base(dat = batch6,
standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016',
#                          stringr::str_extract(string = `GC Batch #`,
#                                               pattern = '[0-9]+$'),
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`,
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet1', na = 'NA') %>%
dplyr::rename(Batch = `GC Batch #`, SampleWt = SampleWeight)
batch6_nmol <- process_peak_area_base(dat = batch6,
standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
batch6_d13c <- correct_iso_base(df = batch6, d13c_correction = 37.433,
methanol_13c = (-13))
# Maybe the object comes in after analysis - could have the whole project together and use it to
# filter low peak height samples, etc - completely in physeq mold
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
a[(is.na(a))] <- 0.0
View(a)
# Maybe the object comes in after analysis - could have the whole project together and use it to
# filter low peak height samples, etc - completely in physeq mold
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
View(a)
View(batch6_nmol)
standard_filenames <- samp_wt_df[samp_wt_df[['SampleType']] == 'blank']
standard_filenames <- samp_wt_df[samp_wt_df[['SampleType']] == 'blank', ]
standard_filenames <- samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName']
standard_filenames <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])
batch6_nmol <- process_peak_area_base(dat = batch6,
standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
batch6_d13c <- correct_iso_base(df = batch6, d13c_correction = 37.433,
methanol_13c = (-13))
#-------------------------
# Reshape data to wide for NMDS and PCA (and other multivariate stats)
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
View(a)
a[(is.na(a))] <- 0.0
b <- merge(a, samp_wt_df, by = DataFileName)
b <- merge(a, samp_wt_df, by = 'DataFileName')
View(b)
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
View(b)
b <- b[b[['SampleType']] == 'unknown']
b <- b[b[['SampleType']] == 'unknown'. ]
b <- b[b[['SampleType']] == 'unknown', ]
View(a)
View(b)
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName', '8:0':'19:0 cyclo')]
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName')]
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName', c('8:0':'19:0'))]
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName', 3:13)]
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName', c(3:13))]
lipid_reference
b <- b[b[['SampleType']] == 'unknown', c('Plot', 'DepthInterval', 'DataFileName', lipid_reference$fame)]
b <- b[b[['SampleType']] == 'unknown', c(15, 17, 2, 3:13, ]
b <- b[b[['SampleType']] == 'unknown', c(15, 17, 2, 3:13), ]
View(b)
b <- b[b[['SampleType']] == 'unknown', c(15, 17, 2, 3:13)]
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown', c(15, 17, 2, 3:13)]
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown', c(15, 17, 2, c(3:13))]
library(vegan)
metaMDS(b, dist = 'bray')
?metaMDS
set.seed(100)
metaMDS(as.matrix(b), dist = 'bray')
# Cameron removes outliers using 1.5xIQR method
is.na(b)
View(b)
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
View(b)
b <- b[b[['SampleType']] == 'unknown', ]
View(b)
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]),
c(15, 17, 2, c(3:13))]
set.seed(100)
metaMDS(as.matrix(b), dist = 'bray')
nmds_data <- metaMDS(as.matrix(b), dist = 'bray')
plot(nmds_data)
View(b)
all_batches_list <- import_batch_multi_base(source_dir)
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'batch')
library(dplyr)
source('C:/Users/Mark/Desktop/plfayer/R/helper_funs.R', echo=TRUE)
library(plfayer)
all_batch_list <- process_peak_area_base(dat = batch6,
standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
source_dir <- choose.dir()
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'batch')
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'Batch')
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'Batch')
library(plfayer)
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'Batch')
all_batch_list <- lapply(all_batches_list, process_peak_area_base, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
library(plfayer)
nmol_all <- lapply(all_batches_list, process_peak_area_base, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet1', na = 'NA') %>%
dplyr::rename(Batch = `GC Batch #`, SampleWt = SampleWeight)
library(dplyr)
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx',
sheet = 'Sheet1', na = 'NA') %>%
dplyr::rename(Batch = `GC Batch #`, SampleWt = SampleWeight)
standard_filenames <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'Batch')
nmol_all <- lapply(all_batches_list, process_peak_area_base, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
blanks_vec <- samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName']
nmol_all <- lapply(all_batches_list, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
process_peak_area_base(all_batches_list[[1]], blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
process_peak_area_base(all_batches_list[[2]], blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
process_peak_area_base(all_batches_list[[3]], blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
process_peak_area_base(all_batches_list[[4]], blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
subtract_blanks_base1 <- function(df, blanks = c('1.raw', '2.raw'),
lipids = c('13:0', '19:0')){  # version that subtracts avg of blanks only
blanks_df <- df[df[['DataFileName']] %in% blanks, ]
blanks_df <- aggregate(TotalPeakArea1 ~ Batch + Name,
FUN = function(x){
blank_area <- mean(x, na.rm = TRUE)
}, data = blanks_df
)
blanks_df <- blanks_df[blanks_df[['Name']] %in% lipids, ]
names(blanks_df)[names(blanks_df) == 'TotalPeakArea1'] <- 'StdArea'
full_df <- merge(df, blanks_df, by = c('Batch', 'Name'), all.x = TRUE)
#full_df[is.na(full_df[['StdArea']]), 'StdArea'] <- 0
full_df <- transform(full_df,
StdArea = ifelse(is.na(StdArea), 0, StdArea))
full_df <- transform(full_df,
AreaMinusBlanks = ifelse(TotalPeakArea1 - StdArea > 0,
TotalPeakArea1 - StdArea, 0))
return(full_df)
}
subtract_blanks_base1(all_batches_list[[4]], blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
subtract_blanks_base1(all_batches_list[[4]], blanks = blanks_vec)
subtract_blanks_base1 <- function(df, blanks = c('1.raw', '2.raw'),
lipids = c('13:0', '19:0')){  # version that subtracts avg of blanks only
blanks_df <- df[df[['DataFileName']] %in% blanks, ]
print(blanks_df)
blanks_df <- aggregate(TotalPeakArea1 ~ Batch + Name,
FUN = function(x){
blank_area <- mean(x, na.rm = TRUE)
}, data = blanks_df
)
blanks_df <- blanks_df[blanks_df[['Name']] %in% lipids, ]
names(blanks_df)[names(blanks_df) == 'TotalPeakArea1'] <- 'StdArea'
full_df <- merge(df, blanks_df, by = c('Batch', 'Name'), all.x = TRUE)
#full_df[is.na(full_df[['StdArea']]), 'StdArea'] <- 0
full_df <- transform(full_df,
StdArea = ifelse(is.na(StdArea), 0, StdArea))
full_df <- transform(full_df,
AreaMinusBlanks = ifelse(TotalPeakArea1 - StdArea > 0,
TotalPeakArea1 - StdArea, 0))
return(full_df)
}
subtract_blanks_base1(all_batches_list[[4]], blanks = blanks_vec)
all_batches_list[[4]][all_batches_list[[4]][['DataFileName']] %in% blanks_vec, ]
blanks_vec <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])
nmol_all <- lapply(all_batches_list, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
nmol_all_df <- do.call(nmol_all, 'rbind')
nmol_all_df <- do.call('rbind', nmol_all)
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
a <- reshape::cast(nmol_all_df, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
a[(is.na(a))] <- 0.0
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]),
c(15, 17, 2, c(3:13))]
library(vegan)
set.seed(100)
nmds_data <- metaMDS(as.matrix(b), dist = 'bray')
plot(nmds_data)
View(b)
View(b)
View(nmol_all_df)
View(nmol_all_df)
library(plfayer)
library(plfayer)
nmol_all <- lapply(all_batches_list, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
library(plfayer)
nmol_all <- lapply(all_batches_list, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
soil_wt_df = samp_wt_df)
nmol_all_df <- do.call('rbind', nmol_all)
View(nmol_all_df)
a <- reshape::cast(nmol_all_df, DataFileName ~ Name,
value = 'nmol_g', fun.aggregate = sum)
a[(is.na(a))] <- 0.0
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]),
c(15, 17, 2, c(3:13))]
set.seed(100)
nmds_data <- metaMDS(as.matrix(b), dist = 'bray')
View(a)
(is.na(a)
)
a[(is.na(a))] #<- 0.0
which(is.na(a)==TRUE)
which(is.na(a)==FALSE)
b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
View(b)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]),
c(15, 17, 2, c(3:13))]
is.na(b)
which(is.na(b) ==TRUE)
set.seed(100)
nmds_data <- metaMDS(as.matrix(b), dist = 'bray')
nmds_data <- metaMDS(as.matrix(b[,2:14]), dist = 'bray')
b[,2:14]
which(is.na(b[,2:14]) ==TRUE)
c<-b[,2:14]
View(b)
c<-as.matrix(b[,2:14])
View(c)
nmds_data <- metaMDS(c, dist = 'bray')
which(is.na(c)==TRUE)
set.seed(100)
nmds_data <- metaMDS(c, dist = 'bray')
install.packages('vegan')
install.packages("vegan")
library(vegan)
library(vegan)
library('vegan')
