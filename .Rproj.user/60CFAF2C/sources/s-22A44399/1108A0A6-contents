# This is a practice script using plfayer package to complete the analysis pipe

data_2016 <- import_batch_multi(source_dir, keyword = 'Batch')

qc_stats_2016 <- quality_check(data_2016)

lapply(qc_stats_2016, function(x){ # pull out dup lipids to ID samples
  x$duplicate_lipids
}
)

change_win_r_path <- function(windows_path){
  
}

# Load sample wght data sheet
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\20190705_spruce_plfa_sample-prep-wksht.xlsx', 
                        sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
  tidyr::fill(`GC Batch #`) %>%
  filter(!is.na(`Renamed on day 4`)) %>%
  mutate(SampleID = paste(`Sample ID`, '2016', 
                          stringr::str_extract(string = `GC Batch #`, 
                                      pattern = '[0-9]+$'), sep = '_'),
         DataFileName = paste0(`Renamed on day 4`, '.raw'),
         Batch = stringr::str_extract(string = `GC Batch #`, pattern = '[0-9]$+')) %>%
  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)

# Just the B's are standards
standard_filenames <- c('7.raw', '8.raw', '17.raw', '18.raw', '27.raw', 
                        '28.raw', '37.raw', '38.raw', '47.raw', '48.raw',
                        '56.raw', '57.raw', '65.raw', '66.raw', '73.raw', 
                        '74.raw', '81.raw', '82.raw', '89.raw', '90.raw',
                        '95.raw', '96.raw', '101.raw', '102.raw', 
                        '109.raw', '110.raw', '117.raw', '118.raw', '128.raw',
                        '129.raw', '138.raw', '139.raw', '147.raw', '148.raw',
                        '155.raw', '156.raw', '164.raw', '165.raw', '173.raw', 
                        '174.raw', '181.raw', '182.raw', '189.raw', '190.raw', 
                        '201.raw', '202.raw')
#
standard_filenames <- (samp_wt_df %>% filter(stringr::str_detect(SampleID, '^B[0-9]_')))[['DataFileName']]

data_2016_processed <- normalize_area(data_2016) %>%
  subtract_blanks() %>%
  apply_kval(standard_fnames = standard_filenames) %>%
  calc_biomarkers()

# This chunk below would be used only if stopping with concentrations (summary df is clean already)
#data_2016_clean <- data_2016_processed %>% 
#  select(-c(TotalPeakArea1, CFNumerator, CFactor, NormalizedArea, 
#            AreaMinusBlank, kval, molecular_weight_g_per_mol, indicates, 
#            C_PLFA, Batch.y, SampleWt))

metadata_path <- 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\background\\20190911_spruce_core-metadata.xlsx'
plfa_metadata <- readxl::read_excel(path = metadata_path, sheet = 'sample_metadata')

#This seems like it might be repetitive (undoing a previous step)
data_2016_clean <- data_2016_processed %>%
  mutate(SampleID = stringr::str_replace_all(SampleID, ' ', '-'),
         SampleID = stringr::str_replace_all(SampleID, '_', '-'),
         SampleID = stringr::str_remove(SampleID, '(?<=[0-9])[A-Za-z]'),
         SampleID = stringr::str_remove(SampleID, '(?<=[0-9])-[0-9]+-[0-9]'),
         SampleID = stringr::str_remove(SampleID, '-2016-NA'),
         SampleID = stringr::str_replace(SampleID, 'h', 'H'),
         SampleID = stringr::str_remove(SampleID, '(?<=-)[ABCDEF]'),
         SampleID = stringr::str_replace(SampleID, 'A-([+]0-[+]10)-2016-5', '5-Hol-1'),
         SampleID = stringr::str_remove(SampleID, '-[(]Sample-[AB][)]-2016-5*'),
         SampleID = stringr::str_replace(SampleID, 'A-[(][+]0-[+]10[)]-2016-5', '5-Hol-1')
         )
# Need to do a little more replacement to get everything in line, but for now this will do
full_sample_df <- data_2016_clean %>%
  left_join(plfa_metadata, by = 'SampleID') %>%
  filter(!stringr::str_detect(SampleID, '^[BC]'))
unique(full_sample_df[['SampleID']])

# Total biomass
ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(Temperature_treatment), y = TotalBiomass)) +
  ggplot2::facet_wrap(~`Depth increment`, scales = 'free')

ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = TotalBiomass)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'free')

# Funagl:Bacterial
ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = FungiToBact)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'free')

# Groups
ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = PercentBact)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'fixed')

ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = PercentFungi)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'fixed')

ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = PercentGramPos)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'fixed')

ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_boxplot(ggplot2::aes(x = as.character(`Depth increment`), y = PercentGramNeg)) +
  ggplot2::facet_wrap(~Temperature_treatment, scales = 'fixed')

# Scatterplots
# All plots have ambient and elevated CO2
ggplot2::ggplot(data = full_sample_df) +
  ggplot2::geom_point(ggplot2::aes(x = Temperature_treatment, y = PercentFungi, color = CO2_Actual_Treatment)) +
  ggplot2::facet_wrap(~`Depth increment`, scales = 'fixed')
a <- full_sample_df %>% filter(`Depth increment` == 1 & Temperature_treatment == 2.25)

#--------------------------------------------------

meth_cfactors <- readxl::read_excel(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190912_spruce_plfa_13c-corrections.xlsx',
                                    sheet = 'methanol_compiled')

data_2016_processed <- normalize_area(data_2016) %>%
  subtract_blanks() %>%
  apply_kval(standard_fnames = standard_filenames) 

a <- data_2016_processed %>%
  left_join(data_2016, by = c('BatchDataFileName', 'Name')) %>%
  left_join(meth_cfactors, by = c('Batch.x' = 'GCBatch')) %>%
  correct_iso(d13c_correction = 37.433)
apply_kval(data_2016, c('147.raw', '148.raw'))

source_dir <- choose.dir()
a<- import_batch(paste0(source_dir, '\\20180821_GC_Gutknecht_ES_SPRUCE_Batch2_rerun_naming.xlsx'))
'20180821_GC_Gutknecht_ES_SPRUCE_Batch2_rerun_naming.xlsx'

quality_check(a)
calc_concentration(a, standard_fnames = standard_filenames) %>% calc_biomarkers()
lipid_reference
source_dir <- 'C:\\Users\\Mark\\Desktop\\temp plfa practice - can delete whenever'
b<-import_batch_multi('C:\\Users\\Mark\\Desktop\\temp plfa practice - can delete whenever\\20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx', keyword = 'Batch')

############################################
# Full example workflow with 'base' version functions to compare to Excel
# This uses batch6, which should have a fully cleaned and working peak list
############################################
source_dir <- choose.dir()
batch6 <- import_batch_base(paste0(source_dir, 
                              '\\20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx'))
# Batch2, which is full of dups: '20180821_GC_Gutknecht_ES_SPRUCE_Batch2_rerun_naming.xlsx'

# Import function sometimes adds extra cols if you have blank, but previously
# used cells in Excel

batch6_qc <- quality_check_base(batch6)
batch6_qc[['6']][['missing_lipids']]
batch6_qc[['6']][['lipid_frequency']]

# Load sample wght data sheet
#samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\20190705_spruce_plfa_sample-prep-wksht.xlsx', 
#                                sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
#  tidyr::fill(`GC Batch #`) %>%
#  filter(!is.na(`Renamed on day 4`)) %>%
#  mutate(SampleID = paste(`Sample ID`, '2016', 
#                          stringr::str_extract(string = `GC Batch #`, 
#                                               pattern = '[0-9]+$'), 
#                          sep = '_'),
#         DataFileName = paste0(`Renamed on day 4`, '.raw'),
#         Batch = stringr::str_extract(string = `GC Batch #`, 
#                                      pattern = '[0-9]$+')) %>%
#  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)

#standard_filenames <- (samp_wt_df %>% filter(stringr::str_detect(SampleID, 
#                                                                 '^B[0-9]_')))[['DataFileName']]

samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx', 
                                sheet = 'Sheet1', na = 'NA') %>%
              dplyr::rename(Batch = `GC Batch #`, SampleWt = SampleWeight)

standard_filenames <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])

batch6_nmol <- process_peak_area_base(dat = batch6, 
                                      standard_fnames = standard_filenames,
                                      soil_wt_df = samp_wt_df)

batch6_d13c <- correct_iso_base(df = batch6, d13c_correction = 37.433, 
                                methanol_13c = (-13))

#-------------------------
# Reshape data to wide for NMDS and PCA (and other multivariate stats)
a <- reshape::cast(batch6_nmol, DataFileName ~ Name,
                   value = 'nmol_g', fun.aggregate = sum)

a[(is.na(a))] <- 0.0                   

b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]), 
       c(15, 17, 2, c(3:13))]

library(vegan)

set.seed(100)
nmds_data <- metaMDS(as.matrix(b), dist = 'bray') 

plot(nmds_data)
# Cameron removes outliers using 1.5xIQR method

# Maybe the object comes in after analysis - could have the whole project together and use it to 
# filter low peak height samples, etc - completely in physeq mold
#####################################################################
# Example workflow for whole experiment (multiple batches) using base versions
#####################################################################
# Import sample metatdata
samp_wt_df <- readxl::read_xlsx(path = 'C:\\Users\\Mark\\Dropbox\\umn_gutknecht_postdoc\\spruce_project\\plfa_13c\\data\\20190916_spruce_plfa_metadata.xlsx', 
                                sheet = 'Sheet1', na = 'NA') %>%
  dplyr::rename(Batch = `GC Batch #`, SampleWt = SampleWeight)

# Define DataFileNames associated with standards used for kval
standard_filenames <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])

# Define filenames associated with blanks for subtracting form unknowns
blanks_vec <- unlist(samp_wt_df[samp_wt_df[['SampleType']] == 'blank', 'DataFileName'])

source_dir <- choose.dir()  # Select directory holding batch files
# import all batches into a list
all_batches_list <- import_batch_multi_base(source_dir, keyword = 'Batch')  
                                  
# calculate nmol concentrations for all batches
nmol_all <- lapply(all_batches_list, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
                                      soil_wt_df = samp_wt_df)
# merge results into a single dataframe for analysis
nmol_all_df <- do.call('rbind', nmol_all)

# convert to wide format for multivariate stats
a <- reshape::cast(nmol_all_df, DataFileName ~ Name,
                   value = 'nmol_g', fun.aggregate = sum)

a[(is.na(a))] <- 0.0  # convert NA to 0 (NA throws error in NMDS)

b <- merge(a, samp_wt_df, by = 'DataFileName', all.x = TRUE)
b <- b[b[['SampleType']] == 'unknown' & !is.na(b[['SampleType']]), ]
b <- b[which(rowSums(b[c(2:23)])>0),]
c <- b[, c(2:23)]
rownames(c) <- b$DataFileName
treats <- b$Batch


library(vegan)
# rows with all 0 caues issues with bray-curtis, so remove
c <- c[which(rowSums(c)>0),]
c <- as.matrix(c)
names(dimnames(c)) <- c('DataFileName', 'Lipid')
set.seed(100)
nmds_data <- metaMDS(as.matrix(c), dist = 'bray') 
stressplot(nmds_data)

nmds_sample_scores <- as.data.frame(scores(nmds_data))  # returns a matrix of the NMDS1 and NMDS2 sample scores
nmds_sample_scores[['sample']] <- rownames(nmds_sample_scores)
nmds_sample_scores <- merge(nmds_sample_scores, samp_wt_df, by.x = 'sample', 
                            by.y = 'DataFileName', all.x = TRUE)

nmds_species_scores <- scores(nmds_data, 'species')  # same, but for species (lipid)


chull(nmds_data$grp == ??)  # extract hull data for this group

ggplot2::ggplot(data = nmds_sample_scores, ggplot2::aes(x = NMDS1, y = NMDS2, 
                                               color = DepthInterval)) +
  ggplot2::geom_point() + 
  ggplot2::stat_ellipse() +
  ggplot2::theme_bw()


# base graphics
plot(nmds_data)
ordiplot(nmds_data, type = 'n')
ordihull(nmds_data, groups = treats, draw = 'polygon')
orditorp(nmds_data, display = 'sites', cex=.5,air=0.01, col = treats)
summary(vegan::ordiellipse(nmds_data, groups = treats))

indicators_all <- lapply(nmol_all, process_peak_area_base, blanks = blanks_vec, standard_fnames = standard_filenames,
                   soil_wt_df = samp_wt_df)

indicators_all <- lapply(nmol_all, calculate_indicators_base)

indicators_all_df <- do.call('rbind', indicators_all)



ggplot2::ggplot(data = indicators_all_df[indicators_all_df['Indicator'] == 'total_biomass', ], 
  ggplot2::aes(x = DepthInterval, y = Percent_or_fraction)) +
  ggplot2::geom_boxplot() +
  ggplot2::facet_wrap(~Plot)

#######################################################################
# Separate pieces of info required for processing a batch of samples:
# - Named peak list dataframe (Batch, DataFileName, TotalPeakArea1, MajorHeightnA, DisplayDelta1)
# - Sample weights
# - Vector of filenames used for standards
# - Vector of filenames corresponding to blanks (13:0 and 19:0) - kind of tricky, since these are different
# - d13C correction factor
# - Methanol 13C
# - Not used in this package yet, but we will also want other metadata for identifying the samples
# - Allow an optional list defining the column names of input files
#
#
# Wnat to make it more transparent which parameters were used in the analysis
# - Might want to print intermediate calculated parameters, like kval, avg of standards, etc
# - Could also store this to a dataframe
# - Metadata dataframe could also be useful (include the role of each sample in this?)
readClipboard()
a<-import_batch_wide('C:\\Users\\Mark\\Desktop\\temp plfa practice - can delete whenever\\20190401_GC_Gutknecht_TS_SPRUCE_Batch6_naming.xlsx')
a<- import_batch_multi_wide(source_dir, keyword = 'Batch')
a<-calculate_indicators_base(nmol_all[[6]])

ggplot2::ggplot(data = a[a[['Indicator']]=='total_biomass',], ggplot2::aes(x = Plot, y = Percent_or_fraction)) +
  ggplot2::geom_boxplot()

# for filtering: use apply to create a logical matrix, then use matrix to select items

a_mat <- matrix(data = c('a','b','b','b','c','a'), nrow = 2, ncol = 3)
logic_mat <- a_mat == 'b'
logic_mat
a_mat[logic_mat]
setdiff()
setequal()

