make_plots <- function(df, x_var, y_vars, color_var, facet_var = NULL, shape_var = NULL,
                       n_row = 2, n_col = 3, type = 'jitter', scaled = FALSE, 
                       labs = NULL){

  plt_list <- lapply(
    y_vars, function(y){
      if(scaled == TRUE){
        ymin <- min(df[[y]], na.rm = TRUE)
        ymax <- max(df[[y]], na.rm = TRUE)
      }
      if(type == 'jitter'){
        plt_legend <- ggplot(data = df, aes_string(x = x_var, y = y, color = color_var, shape = shape_var)) + 
          geom_jitter(width = 0.2, alpha = 0.75)
        
        plt <- ggplot(data = df, aes_string(x = x_var, y = y, color = color_var, shape = shape_var)) + 
          geom_jitter(width = 0.2, alpha = 0.75) +
          theme(legend.position = 'none')
        
        if(!is.null(facet_var)){
          plt <- plt + facet_grid(facet_var) 
        }
        
        return(plt)
      }
      if(type =='regression'){
        plt_legend <- ggplot(data = df, aes_string(x = x_var, y = y)) + 
          geom_smooth(method = 'lm', se = TRUE, alpha = 0.3) +
          geom_point(alpha = 0.75, aes_string(color = color_var, shape = shape_var)) 
        
        plt <- ggplot(data = df, aes_string(x = x_var, y = y)) + 
          geom_smooth(method = 'lm', se = TRUE, alpha = 0.3) +
          geom_point(alpha = 0.75, aes_string(color = color_var, shape = shape_var)) +
          theme(legend.position = 'none') #+
        #facet_grid(facet_var) 
        if(!is.null(facet_var)){
          plt <- plt + facet_grid(facet_var) 
        }
        return(plt)
      }
    }
  )
  names(plt_list) <- y_vars
  
  leg <- get_legend(plt_legend) # Add legend back in
  
  if(is.null(labs)){
    multi_plt <- plot_grid(plotlist = plt_list, labels = y_vars, nrow = n_row, ncol = n_col)
  } else{
    multi_plt <- plot_grid(plotlist = plt_list, labels = labs, nrow = n_row, ncol = n_col)
  }
  
  multi_plt_leg <- plot_grid(multi_plt, legend = leg, nrow = 1, ncol = 2, rel_widths = c(3, 0.3))
  return(multi_plt_leg)
}
  y_vars <- c('d13C', 'd15N', 'd34S', 'C_percent', 'N_percent', 'S_percent')
  y_labs <- c('d13C', 'd15N', 'd34S', '%C', '%N', '%S')
  spread_plot <- make_plots(compiled_15_16, 'Year', y_vars, 'IRMS_batch', facet_var = NULL, 
                            shape_var = 'Year', n_row = 2, n_col = 3, type = 'jitter', scaled = FALSE, 
                            labs = y_labs)
  spread_plot
  #################
  
  for(y in y_vars){
    names(plt_list)[i] <- y
    if(scaled == TRUE){
      ymin <- min(df[[y]], na.rm = TRUE)
      ymax <- max(df[[y]], na.rm = TRUE)
    }
    if(type == 'jitter'){
      plt_legend <- ggplot(data = df, aes_string(x = x_var, y = y, color = color_var, shape = shape_var)) + 
        geom_jitter(width = 0.2, alpha = 0.75)
      
      plt <- ggplot(data = df, aes_string(x = x_var, y = y, color = color_var, shape = shape_var)) + 
        geom_jitter(width = 0.2, alpha = 0.75) +
        theme(legend.position = 'none')
      
      if(!is.null(facet_var)){
        plt <- plt + facet_grid(facet_var) 
      }
      
      plt_list[[y]] <- plt
    }
    if(type =='regression'){
      plt_legend <- ggplot(data = df, aes_string(x = x_var, y = y)) + 
        geom_smooth(method = 'lm', se = TRUE, alpha = 0.3) +
        geom_point(alpha = 0.75, aes_string(color = color_var, shape = shape_var)) 
      
      plt <- ggplot(data = df, aes_string(x = x_var, y = y)) + 
        geom_smooth(method = 'lm', se = TRUE, alpha = 0.3) +
        geom_point(alpha = 0.75, aes_string(color = color_var, shape = shape_var)) +
        theme(legend.position = 'none') #+
      #facet_grid(facet_var) 
      if(!is.null(facet_var)){
        plt <- plt + facet_grid(facet_var) 
      }
      plt_list[[y]] <- plt
    }
    
    i = i + 1
  }
  
  leg <- get_legend(plt_legend) # Add legend back in
  
  if(is.null(labs)){
    multi_plt <- plot_grid(plotlist = plt_list, labels = y_vars, nrow = n_row, ncol = n_col)
  } else{
    multi_plt <- plot_grid(plotlist = plt_list, labels = labs, nrow = n_row, ncol = n_col)
  }
  
  multi_plt_leg <- plot_grid(multi_plt, legend = leg, nrow = 1, ncol = 2, rel_widths = c(3, 0.3)) # Plot final figure
  #####
}

###
###
###
transform_funs <- list(
  calc_relative_sd <- function(x){abs(sd(x)/mean(x))},
  calc_relative_range <- function(x){abs((max(x)-min(x))/mean(x))}
)

transform_vals <- function(df, fun){
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm) %>%
    summarise_at(vars(C_percent:d34S), funs(fun_a, n = n())) %>%
    rename(Replicates = C_percent_n) %>%
    select(everything(), -contains('_n')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}

transform_vals(compiled_15_16, transform_funs$calc_relative_sd)
transform_vals(compiled_15_16, transform_funs$calc_relative_range)
###

transform_vals <- function(df, fun){
  
  transformation <- switch(fun,
                           rel_sd = function(x){abs(sd(x)/mean(x))},
                           rel_range = function(x){abs((max(x)-min(x))/mean(x))},
                           normalize = function(x){x/mean(x)}
                           )
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm) %>%
    summarise_at(vars(C_percent:d34S), funs(transformation, n = n())) %>%
    rename(Replicates = C_percent_n) %>%
    select(everything(), -contains('_n')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}
transform_vals(compiled_15_16, fun = 'rel_range')
transform_vals(compiled_15_16, fun = 'normalize')

###
a <-function(x){abs((max(x)-min(x))/mean(x))}
b<- function(x){abs(sd(x)/mean(x))}

transform_vals <- function(df, ...){
  
  transforms <- quos(...)
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm) %>%
    summarise_at(vars(C_percent:d34S), funs(!!!transforms, reps = n())) %>%
    rename(Replicates = C_percent_reps) %>%
    select(everything(), -contains('_reps')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}

c<-transform_vals(compiled_15_16, rel_range = abs((max(.)-min(.))/mean(.)))
####
####
transform_vals <- function(df, ...){funcs <- substitute(list(...))
print(funcs)}

a <- transform_vals(compiled_15_16, 'rel_range')
b <- make_rel_range_df(compiled_15_16)
all.equal(a,b)

summarize_qc_vals <- function(df, fun){
  
  summary_val <- switch(fun,
                           rel_sd = quos(rel_sd = abs(sd(.)/mean(.))),
                           rel_range = quos(abs((max(.)-min(.))/mean(.))),
                           mean_sd = quos(mean = mean(.), sd = sd(.))
  )
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm) %>%
    summarise_at(vars(C_percent:d34S), funs(!!!summary_val, n = n())) %>%
    rename(Replicates = C_percent_n) %>%
    select(everything(), -contains('_n')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}
c <- summarize_qc_vals(compiled_15_16, 'mean_sd')

make_frac_change_df <- function(df){
  frac_change <- function(x){(x-dplyr::lead(x))/x}
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm, IRMS_batch) %>%
    arrange(IRMS_analysis_number) %>%
    mutate_at(vars(C_percent:d34S), funs(frac_change(.), reps = n())) %>%
    rename(Replicates = C_percent_reps) %>%
    select(everything(), -contains('_reps')) %>%
    filter(Replicates > 1, !is.na(C_percent_frac_change)) %>%
    ungroup()
}

normalize_rep_df <- function(df){
  norm_value <- function(x){x/mean(x)}
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm, IRMS_batch) %>%
    mutate_at(vars(C_percent:d34S), funs(norm = norm_value, reps = n())) %>%
    rename(Replicates = C_percent_reps) %>%
    select(everything(), -contains('_reps')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}

transform_vals <- function(df, fun){

  transformation <- switch(fun,
                           normalize = quos(normalized = ./mean(.)),
                           frac_change = quos(frac_change = (.-dplyr::lead(.))/.)
  )
  
  df2 <- df %>% 
    group_by(Year, Plot, Mid_core_depth_cm, IRMS_batch) %>%
    arrange(IRMS_analysis_number) %>%
    mutate_at(vars(C_percent:d34S), funs(!!!transformation, reps = n())) %>%
    rename(Replicates = C_percent_reps) %>%
    select(everything(), -contains('_reps')) %>%
    filter(Replicates > 1) %>%
    ungroup()
}

c <- transform_vals(compiled_15_16, 'frac_change')
d <- make_frac_change_df(compiled_15_16)
quos(frac_change = arrange(IRMS_analysis_number) %>% (.-dplyr::lead(.))/.)

normalize_area <- function(df){
  
  df %>% group_by(Batch, BiomarkerFinal) %>%
    summarise(BatchMeanPeakArea = mean(TotalPeakArea1, na.rm = TRUE)) %>%
    group_by(BiomarkerFinal) %>%
    mutate(CFactor = max(BatchMeanPeakArea) / BatchMeanPeakArea) %>%
    right_join(df, by = c('Batch', 'BiomarkerFinal')) %>%
    mutate(NormalizedArea = BatchMeanPeakArea * CFactor)
  
}


# both versions seem to work now
subtract_blanks <- function(df, biomarkers = c('13:0', '19:0')){  # version that subtracts average of all peak area in that batch
  df %>% ungroup() %>% 
    group_by(Batch, BiomarkerFinal) %>%
    mutate(AreaMinusBlank = if_else(BiomarkerFinal %in% biomarkers, 
                                    NormalizedArea-mean(NormalizedArea), 
                                    NormalizedArea),
           AreaMinusBlank = if_else(AreaMinusBlank < 0, 0, AreaMinusBlank))
}

subtract_blanks <- function(df, blanks = c('100.raw', '101.raw'), 
                            biomarkers = c('13:0', '19:0')){  # version that subtracts avg of blanks only
  df %>% ungroup() %>% 
    group_by(Batch, BiomarkerFinal) %>%
    mutate(AreaMinusBlank = if_else(BiomarkerFinal %in% biomarkers,
                                    NormalizedArea-if_else(DataFileName %in% blanks,
                                                           mean(NormalizedArea), 0), 
                                    NormalizedArea),
           AreaMinusBlank = if_else(AreaMinusBlank < 0, 0, AreaMinusBlank))
}

final_results_df <- all_batch_df %>% 
  normalize_area() %>%
  subtract_blanks





a <- normalize_area(all_batch_df) %>%
  subtract_blanks()
