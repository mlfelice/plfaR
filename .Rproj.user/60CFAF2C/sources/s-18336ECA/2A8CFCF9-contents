# Author: Mark Felice
# Date created: 7/5/2015
# Last modified: 7/8/2019
#
# Script attaches sample descriptions to 2016 SPRUCE GC data
#
#
#

o_wd <- getwd() #store original wd for restore

setwd('C:/Users/Mark/Dropbox/umn_gutknecht_postdoc/spruce_project/plfa_13c/')

# 1. Load packages
#-----------------
library(tidyverse)
library(readxl)

# Load sample wght data sheet
samp_wt_df <- read_xlsx(path = '20190705_spruce_plfa_sample-prep-wksht.xlsx', 
                       sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
  fill(`GC Batch #`) %>%
  select(`Sample ID`, `Renamed on day 4`, `GC Batch #`) %>%
  mutate(sample_id = paste(`Sample ID`, '2016', 
                           str_extract(string = `GC Batch #`, 
                                       pattern = '(?<=#)[0-9]+'), sep = '_')) %>%
  mutate(DataFileName = ifelse(!is.na(`Renamed on day 4`), paste0(`Renamed on day 4`, '.raw'), NA))

# Load GC batch file
pk_name_df <- read_xlsx(path = 'peak_naming/raw_data/20190206_GC_Gutknecht_TS_SPRUCE_Batch3_naming.xlsx',
                        sheet = 'named_peaks')

# Another implementation of fill down #####
# Load sample wght data sheet
s_prep_df <- read_xlsx(path = '20190705_spruce_plfa_sample-prep-wksht.xlsx', 
                       sheet = 'SPRUCE weights ', na = 'NA') %>%  # sht name incl trailing space
  fill(X__1)  # fill down vals in col 1

# function from: https://stackoverflow.com/questions/10554741/fill-in-data-frame-with-values-from-rows-above 
fill_vals <- function(x, blank = is.na) {
  # Find the values
  if (is.function(blank)) {
    isnotblank <- !blank(x)  # Create T/F vector of non-blanks
  } else {
    isnotblank <- x != blank  # Create T/F vector of non-blanks
  }
  # Fill down
  # Create vector of non-blanks: x[which(isnotblank)]
  # Cumsum sums the TRUE values to create running col index, which repeats on F
  # Use this vector to select the values from non-blank vector
  x[which(isnotblank)][cumsum(isnotblank)]  
}

s_prep_df[, 1] <- fill_vals(s_prep_df[['X__1']])
s_prep_df[['X__1']]


#####

full_df <- pk_name_df %>% left_join(samp_wt_df, by = 'DataFileName')

##
##
# This accomplishes what we want; now we just need to decide which columns to 
# keep, naming schemes, etc
###
###
