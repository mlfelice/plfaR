# 8/9/2019 current iteration of nmol calcs and quality checks

# 1. Load packages ####
#----------------------
library(tidyverse)
library(readxl)
library(writexl)
library(reshape2)
library(stringr)

# 2. Define functions ####
# ------------------------
load_batch <- function(file_path){
  read_xlsx(file_path, sheet = 'named_peaks', na = 'NA') %>%
    select(-BiomarkerRTBased, -Notes) %>%
    filter(!is.na(BiomarkerFinal) & 
             BiomarkerFinal != 'Check chromatogram for 18 peaks' & 
             BiomarkerFinal != 'nothing') %>%
    mutate(Batch = str_extract(string = file_path, pattern = '[Bb]atch ?[0-9]+'),
           BatchDataFileName = paste(Batch, DataFileName, sep = '_'),
           DisplayDelta1 = as.numeric(DisplayDelta1)) %>% # ? looks for 0 or 1)
    select(Batch, DataFileName, BatchDataFileName, everything())
}

check_quality <- function(df){
  qc_df <- df %>%
    group_by(DataFileName, BiomarkerFinal) %>%
    summarise(Count = n()) #%>%
  #spread(key = BiomarkerFinal, value = Count)
}

id_dups <- function(df){
  duplicates_df <- df %>%
    filter(Count > 1)
  
  return(duplicates_df)
}

find_miss <- function(df, lipids = c('13:0', '16:0', '19:0')){
  
  file_names <- unique(df[['DataFileName']])
  biomarkers <- unique(df[['BiomarkerFinal']])
  
  missing_std_df <- df %>%
    complete(BiomarkerFinal = !!biomarkers) %>%
    filter(is.na(Count) & BiomarkerFinal %in% !!lipids) %>%
    select(-Count)
    #group_by(DataFileName) 
  
}

count_lips <- function(df){
  
  n_samples <- length(unique(df[['DataFileName']]))
  
  lipid_count_df <- df %>%
    mutate(Count = 1) %>%
    group_by(BiomarkerFinal) %>%
    summarise(LipidFrequency = sum(Count)/!!n_samples)
  
  return(lipid_count_df)
}

normalize_area <- function(df){
  cf_numerator_df <- df %>% 
    group_by(BatchDataFileName) %>%
    mutate(AllLipidArea = sum(TotalPeakArea1)) %>%
    ungroup %>% 
    group_by(Batch) %>%
    mutate(MeanBatchArea = mean(AllLipidArea)) %>% 
    ungroup() %>%
    filter(MeanBatchArea == max(MeanBatchArea)) %>%
    group_by(BiomarkerFinal) %>%
    summarise(CFNumerator = mean(TotalPeakArea1))
  
  df %>% #group_by(Batch, BiomarkerFinal) %>%
    #summarise(BatchMeanPeakArea = mean(TotalPeakArea1, na.rm = TRUE)) %>%
    left_join(cf_numerator_df, by = 'BiomarkerFinal') %>%
    group_by(Batch, BiomarkerFinal) %>%
    mutate(CFactor = CFNumerator / mean(TotalPeakArea1)) %>%
    #right_join(df, by = c('Batch', 'BiomarkerFinal')) %>%
    mutate(NormalizedArea = TotalPeakArea1 * CFactor)  ### changed 8/15/2019
  
}

subtract_blanks <- function(df, biomarkers = c('13:0', '19:0')){  # version that subtracts average of all peak area in that batch
  df %>% ungroup() %>% 
    group_by(Batch, BiomarkerFinal) %>%
    mutate(AreaMinusBlank = if_else(BiomarkerFinal %in% biomarkers, 
                                    NormalizedArea-mean(NormalizedArea), 
                                    NormalizedArea),
           AreaMinusBlank = if_else(AreaMinusBlank < 0, 0, AreaMinusBlank))
}

subtract_blanks <- function(df, blanks = c('100.raw', '101.raw'), 
                            biomarkers = c('13:0', '19:0')){  # version that subtracts avg of blanks only
  
  blanks_df <- df %>% 
    filter(DataFileName %in% blanks) %>%
    group_by(BiomarkerFinal) %>%
    mutate(BlankArea = if_else(BiomarkerFinal %in% biomarkers, mean(TotalPeakArea1), 0)) %>%
    select(BiomarkerFinal, BlankArea)
  
  df %>% ungroup() %>% 
    left_join(blanks_df, by = 'BiomarkerFinal') %>%
    mutate(BlankArea = if_else(is.na(BlankArea), 0, BlankArea)) %>%
    group_by(Batch, BiomarkerFinal) %>%
    mutate(AreaMinusBlank = if_else(NormalizedArea - BlankArea < 0, 0,
                                    NormalizedArea - BlankArea))
}

apply_kval <- function(df, standard_fnames, mw_df, standard_conc = 250, inj_vol = 2, #standard_fnames should be blanks, not 13:0 standard, I think
                       standard = '13:0', soil_wt_df, vial_vol = 20){
  kval_df <- df[which(df[['DataFileName']] %in% standard_fnames &
                        df[['BiomarkerFinal']] == standard),] %>%
    group_by(Batch, BiomarkerFinal) %>%
    summarise_at(vars(NormalizedArea), mean, na.rm = TRUE) %>%  # intra-batch mean of blanks
    ungroup() %>%
    rename(StandardArea = NormalizedArea, StandardBiomarker = BiomarkerFinal) %>%  # rename so distinct after join
    #group_by(Batch, Biomarker) %>%
    mutate(kval = (StandardArea / !!standard_conc / !!inj_vol)) %>%  # calc kval - one/batch
    #filter(Biomarker == standard & !is.na(Batch)) %>%
    right_join(df, by = c('Batch')) %>%
    left_join(mw_df, by = c('BiomarkerFinal' = 'FAME ID')) %>%
    select(-Batch) %>%
    left_join(samp_wt_df, by = 'DataFileName') %>%
    mutate(nmol_g = (NormalizedArea / kval) * (!!vial_vol / 2) / 
             (`Molecular weight (g/mol)` * SampleWt)) 
  return(kval_df)
  
}

calc_biomarkers <- function(df){
  f_lipids <- c('16:1 w5c', '18:1 w9c', '18:2 w6,9c')
  b_lipids <- c('13:0 iso', '13:0 anteiso', '14:0 3OH', '15:0 iso', '15:0 anteiso', 
                '16:0 iso', '16:1 w7c', '16:0 10me', '17:0 iso', '17:0 anteiso', 
                '18:1 w9t', '18:1 w7c', '18:0 10me')
  
  df <- df %>% group_by(BatchDataFileName) %>% 
    mutate(TotalBiomass = sum(nmol_g[!is.na(Indicates)], na.rm = TRUE),
           TotalFungi = sum(nmol_g[BiomarkerFinal %in% !!f_lipids], na.rm = TRUE),
           TotalBact = sum(nmol_g[BiomarkerFinal %in% !!b_lipids], na.rm = TRUE),
           FungiToBact = TotalFungi / TotalBact,
           PercentFungi = TotalFungi / TotalBiomass * 100,
           PercentBact = TotalBact / TotalBiomass * 100
    )
  return(df)
  
}

clean_nmol_df <- function(df){
  clean_df <- df %>% 
    mutate(Replicate = str_extract(SampleID, '(?<=[0-9])[A-Za-z]*(?=_)'),
           Year = str_extract(SampleID, '(?<=_)[0-9]+(?=_)'),
           Plot = str_extract(SampleID, '^[0-9]+(?=-)'),
           DepthNum = str_extract(SampleID, '(?<=-)[0-9](?=[A-Za-z])')) %>%
    select(-c(StandardArea, kval, NormalizedArea, `Molecular weight (g/mol)`, SampleWt))
  return(clean_df)
}

############
o_wd <- getwd() #store original wd for restore

setwd('C:/Users/Mark/Dropbox/umn_gutknecht_postdoc/spruce_project/plfa_13c/')

################
# Load sample wght data sheet
samp_wt_df <- read_xlsx(path = '20190705_spruce_plfa_sample-prep-wksht.xlsx', 
                        sheet = 'SPRUCE batches ', na = 'NA') %>%  # sht name incl trailing space
  fill(`GC Batch #`) %>%
  filter(!is.na(`Renamed on day 4`)) %>%
  mutate(SampleID = paste(`Sample ID`, '2016', 
                          str_extract(string = `GC Batch #`, 
                                      pattern = '[0-9]+$'), sep = '_'),
         DataFileName = paste0(`Renamed on day 4`, '.raw'),
         Batch = str_extract(string = `GC Batch #`, pattern = '[0-9]$+')) %>%
  select(Batch, DataFileName, SampleID, SampleWt = `Sample weight`)

# Load biomarker molecular weights
mwt_ref_df <- read_xlsx('20190521_spruce_plfa_biomarker-molecular-wt.xlsx')

# 3. Load raw data for multiple batch files in single directory ####
#-------------------------------------------------------------------
source_dir <- choose.dir()

batch_list <- list.files(path = source_dir, full.names = TRUE) %>%
  lapply(load_batch)

funs <- list(duplicate_lipids = id_dups, missing_stds = find_miss,
             lipid_counts = count_lips)

lipid_stats <- lapply(batch_list, check_quality) %>% 
  lapply(function(x){
    lapply(funs, function(f){f(x)})})

# 4. Apply nmol calculations to full multi-batch dataset
#-------------------------------------------------------
all_batch_df <- bind_rows(batch_list)

standards <- c('Internal std 1.raw', 'Internal std 2.raw')

final_results_df <- all_batch_df %>% 
  normalize_area() %>%
  subtract_blanks() %>%
  apply_kval(standards, mwt_ref_df) %>%
  calc_biomarkers() %>%
  clean_nmol_df()


##### END #####
# Add function to format and export data, but this should currently be good to 
# pipe into other analyses

# Could add calculations for individual biomarker %
